version: '3.8'

services:
  # RAG API Service
  rag-api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.dev
    ports:
      - "8000:8000"
      - "8888:8888"  # Jupyter
    environment:
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ../src:/app/src
      - ../tests:/app/tests
      - ../data:/app/data
      - ../logs:/app/logs
      - ../examples:/app/examples
      - ../notebooks:/app/notebooks
    depends_on:
      - redis
      - prometheus
    networks:
      - rag-network
    restart: unless-stopped

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - rag-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - rag-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - rag-network
    restart: unless-stopped

  # Vector Database (ChromaDB for development)
  chromadb:
    image: chromadb/chroma:latest
    ports:
      - "8001:8000"
    volumes:
      - chromadb-data:/chroma/chroma
    networks:
      - rag-network
    restart: unless-stopped

  # Jupyter Notebook Service
  jupyter:
    build:
      context: ..
      dockerfile: docker/Dockerfile.dev
    ports:
      - "8888:8888"
    environment:
      - REDIS_URL=redis://redis:6379
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ../notebooks:/app/notebooks
      - ../src:/app/src
      - ../data:/app/data
    networks:
      - rag-network
    restart: unless-stopped
    command: |
      bash -c "
        jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token='' --NotebookApp.password='' &
        sleep infinity
      "

volumes:
  redis-data:
  prometheus-data:
  grafana-data:
  chromadb-data:

networks:
  rag-network:
    driver: bridge